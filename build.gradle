buildscript {
     ext {
         springBootVersion = '1.4.1.RELEASE'
     }
     repositories {
         mavenCentral()
     }
     dependencies {
         classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
         classpath 'se.transmode.gradle:gradle-docker:1.2'
         classpath 'org.owasp:dependency-check-gradle:1.4.5'
     }
}

group = 'teastar'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'findbugs'
//apply plugin: 'org.owasp.dependencycheck'

findbugs {
    ignoreFailures = true
}

jar {
    baseName = 'dvlasearch'
    version = '1.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.projectlombok:lombok:1.16.10'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-core:2.7.11'
    testCompile 'commons-io:commons-io:2.5'
}

// Copies docker file and jar to enable build and publish of image
// via Jenkins plugin
task copyDockerfile(type: Copy) {
    dependsOn   'jar'
    from        "build/libs/${jar.baseName}-${jar.version}.jar"
    from        'src/main/docker'
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${jar.version}", "")
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4' //version required
}
